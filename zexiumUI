--[[
	ZexiumUI Library - V1.3.1 (Fixed)
	Improved styling, fixed slider/dropdown, added minimize.
]]
local ZexiumUI = {}
ZexiumUI.__index = ZexiumUI

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService") -- Included but not used in this version

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Theme Configuration (Adjust colors as needed)
local THEME = {
	Background        = Color3.fromRGB(18, 18, 18),
	LighterBackground = Color3.fromRGB(28, 28, 28),
	InputBackground   = Color3.fromRGB(35, 35, 35),
	PrimaryText       = Color3.fromRGB(255, 255, 255),
	SecondaryText     = Color3.fromRGB(160, 160, 160),
	Accent            = Color3.fromRGB(200, 200, 200), -- Slightly less bright white accent
	AccentDimmed      = Color3.fromRGB(65, 65, 65),   -- Dimmed accent for borders/inactive states
	ErrorText         = Color3.fromRGB(255, 80, 80),
	SuccessText       = Color3.fromRGB(80, 255, 120),
	Hover             = Color3.fromRGB(45, 45, 45)
}

-- Font Configuration
local FONTS = {
	Primary = Enum.Font.GothamSemibold,
	Secondary = Enum.Font.Gotham,
	Monospace = Enum.Font.Code
}

-- Constants for UI Consistency
local UI_CORNER_RADIUS = UDim.new(0, 6)
local UI_STROKE_THICKNESS = 1
local UI_ELEMENT_PADDING = UDim.new(0, 8)  -- Padding between elements within a section
local UI_SECTION_PADDING = UDim.new(0, 10) -- Padding between sections on a page
local UI_PAGE_PADDING = UDim.new(0, 10)    -- Padding within the page scroll area content
local UI_INTERNAL_PADDING = UDim.new(0, 10) -- Padding inside containers like sections/tabs

-- Helper function to create instances
local function Create(instanceType)
	return function(data)
		local obj = Instance.new(instanceType)
		for k, v in pairs(data) do
			obj[k] = v
		end
		if obj:IsA("GuiObject") then
			-- Apply default styles if not provided
			if not data.Font and (obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox")) then
				obj.Font = FONTS.Secondary
			end
			if not data.TextColor3 and (obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox")) then
				obj.TextColor3 = THEME.PrimaryText
			end
			if not data.BackgroundColor3 then
				-- Default backgrounds vary based on type, handle specific cases elsewhere
			end
			if not data.BorderSizePixel then
				obj.BorderSizePixel = 0
			end
		end
		return obj
	end
end

-- Helper function to apply standard rounded corners
local function ApplyStandardRounding(guiObject)
	if guiObject:FindFirstChildWhichIsA("UICorner") then return end
	Create("UICorner"){
		CornerRadius = UI_CORNER_RADIUS,
		Parent = guiObject
	}
end

-- Helper function to apply or update an accent stroke
local function ApplyAccentStroke(guiObject, color, thickness)
	local stroke = guiObject:FindFirstChildWhichIsA("UIStroke")
	if not stroke then
		stroke = Create("UIStroke"){ Parent = guiObject }
	end
	stroke.Color = color or THEME.Accent
	stroke.Thickness = thickness or UI_STROKE_THICKNESS
	stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	return stroke
end

-- Helper function to remove an accent stroke
local function RemoveAccentStroke(guiObject)
	local stroke = guiObject:FindFirstChildWhichIsA("UIStroke")
	if stroke then
		stroke:Destroy()
	end
end

-- Helper function to enable dragging for a GUI object via a handle
local function EnableDragging(guiObject, dragHandle)
	dragHandle = dragHandle or guiObject
	local dragging = false
	local dragInput, mousePosStart, framePosStart

	dragHandle.InputBegan:Connect(function(input)
		-- Prevent dragging if clicking on interactive elements like buttons in the header
		local ZIndexHigh = 0
		local Target = nil
		for _, v in ipairs(guiObject:GetGuiObjectsAtPosition(input.Position.X, input.Position.Y)) do
			if v:IsDescendantOf(guiObject) and v.ZIndex > ZIndexHigh and v ~= dragHandle and not v:IsDescendantOf(dragHandle) then
				ZIndexHigh = v.ZIndex
				Target = v
			end
		end
        -- Allow drag only if clicking the handle directly or non-interactive elements on it
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and (not Target or not (Target:IsA("TextButton") or Target:IsA("ImageButton"))) then
			dragging = true
			mousePosStart = input.Position
			framePosStart = guiObject.Position
			-- Change listener to track mouse release globally
			local connChanged = UserInputService.InputEnded:Connect(function(endInput)
				if endInput.UserInputType == Enum.UserInputType.MouseButton1 or endInput.UserInputType == Enum.UserInputType.Touch then
					dragging = false
                    if connChanged then connChanged:Disconnect() end
				end
			end)
		end
	end)

	-- Use UserInputService for smoother global mouse tracking
	UserInputService.InputChanged:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging and mousePosStart and framePosStart then
			local delta = input.Position - mousePosStart
			guiObject.Position = UDim2.new(framePosStart.X.Scale, framePosStart.X.Offset + delta.X, framePosStart.Y.Scale, framePosStart.Y.Offset + delta.Y)
		end
	end)
end


--[[ Core Window Creation ]]--
function ZexiumUI:CreateWindow(titleText, subtitleText, showIntro)
	local self = setmetatable({}, ZexiumUI)
	self.isMinimized = false -- State for minimize button

	-- Destroy existing UI instance if present
	if playerGui:FindFirstChild("ZexiumUI_Instance") then
		playerGui.ZexiumUI_Instance:Destroy()
	end

	-- Create ScreenGui root
	self.ScreenGui = Create("ScreenGui"){
		Name = "ZexiumUI_Instance",
		ResetOnSpawn = false,
		ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
		Parent = playerGui
	}

	-- Main Window Frame
	self.MainWindow = Create("Frame"){
		Name = "MainWindow",
		AnchorPoint = Vector2.new(0.5, 0.5),
		Position = UDim2.new(0.5, 0, 0.5, 0),
		Size = UDim2.new(0, 650, 0, 450),
		BackgroundColor3 = THEME.Background,
		ClipsDescendants = true, -- Clip content initially
		Parent = self.ScreenGui,
		Visible = not showIntro -- Hide during intro if enabled
	}
	ApplyStandardRounding(self.MainWindow) -- Apply rounding to the main window

	-- Header Frame
	local Header = Create("Frame"){
		Name = "Header",
		Size = UDim2.new(1, 0, 0, 50), -- Standard header height
		BackgroundColor3 = THEME.LighterBackground,
		ClipsDescendants = true, -- Clip header contents (like corners)
		Parent = self.MainWindow
	}
	ApplyStandardRounding(Header)
	-- Cover bottom edge of header to avoid double rounding issue with MainContent
	local headerBottomCover = Create("Frame"){ Name = "HeaderBottomCover", BackgroundColor3 = THEME.LighterBackground, Size = UDim2.new(1,0,0.5,0), Position = UDim2.new(0,0,0.5,0), BorderSizePixel = 0, Parent = Header}

	EnableDragging(self.MainWindow, Header) -- Enable dragging via the header

	-- Title Text
	local Title = Create("TextLabel"){
		Name = "Title",
		Size = UDim2.new(1, -100, 0, 25), -- Adjust width relative to header buttons
		Position = UDim2.new(0.5, 0, 0.35, 0), -- Centered horizontally, positioned vertically
		AnchorPoint = Vector2.new(0.5, 0.5),
		Text = titleText or "Zexium UI", -- Default title
		Font = FONTS.Primary,
		TextSize = 20,
		TextColor3 = THEME.PrimaryText,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Center,
		Parent = Header
	}

	-- Subtitle Text
	local Subtitle = Create("TextLabel"){
		Name = "Subtitle",
		Size = UDim2.new(1, -100, 0, 15), -- Adjust width relative to header buttons
		Position = UDim2.new(0.5, 0, 0.75, 0), -- Centered horizontally, below title
		AnchorPoint = Vector2.new(0.5, 0.5),
		Text = subtitleText or "(Zyron)", -- Default subtitle
		Font = FONTS.Secondary,
		TextSize = 12,
		TextColor3 = THEME.SecondaryText,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Center,
		Parent = Header
	}

    -- Minimize Button
    local MinimizeButton = Create("TextButton"){
        Name = "MinimizeButton",
        AnchorPoint = Vector2.new(1, 0),
        Position = UDim2.new(1, -10, 0, 10),
        Size = UDim2.new(0, 30, 0, 30),
        BackgroundColor3 = THEME.Background,
        TextColor3 = THEME.SecondaryText,
        Font = FONTS.Primary,
        Text = "_", -- Underscore for minimize
        TextSize = 20,
        AutoButtonColor = false,
        Parent = Header
    }
    ApplyStandardRounding(MinimizeButton)
    MinimizeButton.MouseEnter:Connect(function() MinimizeButton.BackgroundColor3 = THEME.Hover end)
    MinimizeButton.MouseLeave:Connect(function() MinimizeButton.BackgroundColor3 = THEME.Background end)

	-- Main Content Area (below header)
	self.MainContent = Create("Frame"){
		Name = "MainContent",
		Size = UDim2.new(1, 0, 1, -Header.Size.Y.Offset), -- Fill space below header
		Position = UDim2.new(0, 0, 0, Header.Size.Y.Offset),
		BackgroundTransparency = 1,
		ClipsDescendants = true, -- Clip content within this area
		Parent = self.MainWindow
	}

	-- Tab Container (Left Sidebar)
	self.TabContainer = Create("Frame"){
		Name = "TabContainer",
		Size = UDim2.new(0, 130, 1, -(UI_INTERNAL_PADDING.Offset * 2)), -- Use internal padding for top/bottom margin
		Position = UDim2.new(0, UI_INTERNAL_PADDING.Offset, 0, UI_INTERNAL_PADDING.Offset),
		BackgroundColor3 = THEME.LighterBackground, -- Match header background
		Parent = self.MainContent
	}
	ApplyStandardRounding(self.TabContainer)

	-- Layout for Tab Buttons
	local tabListLayout = Create("UIListLayout"){
		Padding = UDim.new(0, 5), -- Spacing between tab buttons
		FillDirection = Enum.FillDirection.Vertical,
		HorizontalAlignment = Enum.HorizontalAlignment.Center,
		SortOrder = Enum.SortOrder.LayoutOrder,
		Parent = self.TabContainer
	}
	-- Padding inside the Tab Container
	local tabPadding = Create("UIPadding"){
		PaddingTop = UI_INTERNAL_PADDING, PaddingBottom = UI_INTERNAL_PADDING,
		PaddingLeft = UI_INTERNAL_PADDING, PaddingRight = UI_INTERNAL_PADDING,
		Parent = self.TabContainer
	}

	-- Page Container (Right Area)
	self.PageContainer = Create("Frame"){
		Name = "PageContainer",
		-- Position next to tabs with padding, fill remaining height with padding
		Size = UDim2.new(1, -(self.TabContainer.AbsoluteSize.X + UI_INTERNAL_PADDING.Offset * 3), 1, -(UI_INTERNAL_PADDING.Offset * 2)),
		Position = UDim2.new(0, self.TabContainer.AbsoluteSize.X + UI_INTERNAL_PADDING.Offset * 2, 0, UI_INTERNAL_PADDING.Offset),
		BackgroundTransparency = 1,
		ClipsDescendants = true, -- Clip pages
		Parent = self.MainContent
	}
	-- UIPageLayout to manage switching between pages
	self.UIPageLayout = Create("UIPageLayout"){
		SortOrder = Enum.SortOrder.LayoutOrder,
		EasingStyle = Enum.EasingStyle.Cubic,
		EasingDirection = Enum.EasingDirection.Out,
		TweenTime = 0.25, -- Slightly faster tween
		Parent = self.PageContainer
	}
	self.pages = {}
	self.tabButtons = {}
	self.activeTabButton = nil
    self.originalWindowSize = self.MainWindow.Size -- Store original size for restore

    -- Minimize/Restore Logic
    MinimizeButton.MouseButton1Click:Connect(function()
        self.isMinimized = not self.isMinimized
        local targetSize
        local targetContentVisibility
        if self.isMinimized then
            targetSize = UDim2.new(self.originalWindowSize.X.Scale, self.originalWindowSize.X.Offset, 0, Header.AbsoluteSize.Y)
            targetContentVisibility = false
            MinimizeButton.Text = "□" -- Restore symbol
        else
            targetSize = self.originalWindowSize
            targetContentVisibility = true
            MinimizeButton.Text = "_" -- Minimize symbol
        end

        -- Animate window resize
        local sizeTween = TweenService:Create(self.MainWindow, TweenInfo.new(0.2, Enum.EasingStyle.Quad), { Size = targetSize })
        sizeTween:Play()

        -- Hide/show content immediately or after tween
        self.MainContent.Visible = targetContentVisibility
    end)


	-- Optional Intro Animation
	if showIntro then
		self.MainWindow.Position = UDim2.new(0.5, 0, 0.48, 0) -- Start slightly higher
		local transparencyProxy = Instance.new("NumberValue")
		transparencyProxy.Value = 1
		transparencyProxy.Changed:Connect(function(val)
			self.MainWindow.BackgroundTransparency = val
			Header.BackgroundTransparency = val
			Title.TextTransparency = val
			Subtitle.TextTransparency = val
			MinimizeButton.BackgroundTransparency = val -- Fade minimize button too
			MinimizeButton.TextTransparency = val
			self.TabContainer.BackgroundTransparency = val
            self.MainContent.BackgroundTransparency = val -- Fade content background if it had one
			for _,btn in pairs(self.tabButtons) do btn.BackgroundTransparency = val; btn.TextTransparency = val end
			-- Could potentially fade page content too if needed
		end)

		local introTween = TweenService:Create(self.MainWindow, TweenInfo.new(0.4, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), {Position = UDim2.new(0.5,0,0.5,0)})
		local fadeTween = TweenService:Create(transparencyProxy, TweenInfo.new(0.3, Enum.EasingStyle.Linear), {Value = 0})

		task.wait(0.1) -- Short delay before starting
		self.MainWindow.Visible = true
		introTween:Play()
		fadeTween:Play()
		fadeTween.Completed:Connect(function() transparencyProxy:Destroy() end) -- Clean up proxy
	end

	return self
end

--[[ Page Creation ]]--
function ZexiumUI:CreatePage(pageName)
	local pageObject = {}
	pageName = pageName or "Page " .. (#self.pages + 1)

	-- Scrolling Frame for Page Content
	local pageFrame = Create("ScrollingFrame"){
		Name = pageName .. "_Content",
		Size = UDim2.new(1, 0, 1, 0), -- Fill PageContainer
		BackgroundTransparency = 1, -- Transparent background
		BorderSizePixel = 0,
		ScrollBarImageColor3 = THEME.AccentDimmed,
		ScrollBarThickness = 5, -- Slightly thicker scrollbar
		ScrollingDirection = Enum.ScrollingDirection.Y, -- Vertical scrolling only
		AutomaticCanvasSize = Enum.AutomaticSize.Y,
		CanvasSize = UDim2.new(0,0,0,0), -- Start at 0, will grow automatically
		LayoutOrder = #self.pages + 1,
		Parent = self.PageContainer
	}
	-- List Layout for Sections within the Page
	local pageListLayout = Create("UIListLayout"){
		Padding = UI_SECTION_PADDING, -- Use section padding constant
		FillDirection = Enum.FillDirection.Vertical,
		HorizontalAlignment = Enum.HorizontalAlignment.Center,
		SortOrder = Enum.SortOrder.LayoutOrder,
		Parent = pageFrame
	}
	-- Padding inside the Scrolling Frame Canvas
	local pageContentPadding = Create("UIPadding"){
		PaddingTop = UI_PAGE_PADDING, PaddingBottom = UI_PAGE_PADDING,
		PaddingLeft = UI_PAGE_PADDING, PaddingRight = UI_PAGE_PADDING,
		Parent = pageFrame
	}

	table.insert(self.pages, pageFrame)
	pageObject.frame = pageFrame
	pageObject.sections = {} -- Store sections associated with this page

	-- Create Corresponding Tab Button
	local tabButton = Create("TextButton"){
		Name = pageName .. "_Tab",
		Text = string.upper(pageName), -- Uppercase tab name
		Font = FONTS.Primary,
		TextSize = 14,
		TextColor3 = THEME.SecondaryText, -- Default inactive color
		BackgroundColor3 = THEME.LighterBackground, -- Match tab container background
		Size = UDim2.new(1, -10, 0, 35), -- Slightly inset width, fixed height
        Position = UDim2.new(0.5, 0, 0, 0), -- Center horizontally
        AnchorPoint = Vector2.new(0.5, 0),
		LayoutOrder = #self.tabButtons + 1,
		Parent = self.TabContainer,
        AutoButtonColor = false -- Disable default color changes
	}
	ApplyStandardRounding(tabButton) -- Round the tab button

	table.insert(self.tabButtons, tabButton)

	-- Activate the first page/tab by default
	if not self.activeTabButton then
		self.activeTabButton = tabButton
		tabButton.TextColor3 = THEME.PrimaryText -- Active text color
		ApplyAccentStroke(tabButton, THEME.Accent, 1.5) -- Apply active stroke
		self.UIPageLayout:JumpTo(pageFrame) -- Show this page immediately
	else
        ApplyAccentStroke(tabButton, THEME.AccentDimmed, 1) -- Dimmed stroke for inactive tabs
    end

	-- Tab Button Click Event
	tabButton.MouseButton1Click:Connect(function()
		if self.activeTabButton == tabButton then return end -- Do nothing if already active

		-- Deactivate previous tab
		if self.activeTabButton then
			self.activeTabButton.TextColor3 = THEME.SecondaryText
			self.activeTabButton.BackgroundColor3 = THEME.LighterBackground -- Reset background
			ApplyAccentStroke(self.activeTabButton, THEME.AccentDimmed, 1) -- Set inactive stroke
		end

		-- Activate clicked tab
		tabButton.TextColor3 = THEME.PrimaryText
        tabButton.BackgroundColor3 = THEME.LighterBackground -- Keep background consistent on active
		ApplyAccentStroke(tabButton, THEME.Accent, 1.5) -- Set active stroke
		self.activeTabButton = tabButton
		self.UIPageLayout:JumpTo(pageFrame) -- Switch page view
	end)

	-- Tab Button Hover Effects
	tabButton.MouseEnter:Connect(function()
		if self.activeTabButton ~= tabButton then
			tabButton.BackgroundColor3 = THEME.Hover -- Hover background color
            local stroke = tabButton:FindFirstChildWhichIsA("UIStroke")
            if stroke then stroke.Color = THEME.Accent end -- Brighter stroke on hover
		end
	end)
	tabButton.MouseLeave:Connect(function()
		if self.activeTabButton ~= tabButton then
			tabButton.BackgroundColor3 = THEME.LighterBackground -- Reset background on leave
            local stroke = tabButton:FindFirstChildWhichIsA("UIStroke")
            if stroke then stroke.Color = THEME.AccentDimmed end -- Reset stroke color
		end
	end)

	--[[ Section Creation (Method of Page Object) ]]--
	function pageObject:CreateSection(sectionName)
		local sectionObject = {}
		sectionName = sectionName or "Section " .. (#pageObject.sections + 1)

		-- Frame for the Section
		local sectionFrame = Create("Frame"){
			Name = sectionName,
			Size = UDim2.new(1, 0, 0, 0), -- Width 100%, Height determined by content
			AutomaticSize = Enum.AutomaticSize.Y, -- Auto-adjust height
			BackgroundColor3 = THEME.LighterBackground, -- Section background color
			LayoutOrder = #pageObject.sections + 1,
			Parent = pageObject.frame -- Parent is the page's scrolling frame
		}
		ApplyStandardRounding(sectionFrame) -- Round the section frame
		table.insert(pageObject.sections, sectionFrame)

		-- Padding inside the Section Frame (below title/underline)
		local sectionContentPadding = Create("UIPadding"){
			PaddingTop = UDim.new(0, 35), -- Space for title (20) + underline (1) + gap (14)
			PaddingBottom = UI_INTERNAL_PADDING,
			PaddingLeft = UI_INTERNAL_PADDING,
			PaddingRight = UI_INTERNAL_PADDING,
			Parent = sectionFrame
		}

		-- List Layout for Elements within the Section
		local sectionListLayout = Create("UIListLayout"){
			Padding = UI_ELEMENT_PADDING, -- Use element padding constant
			FillDirection = Enum.FillDirection.Vertical,
			HorizontalAlignment = Enum.HorizontalAlignment.Center,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Parent = sectionFrame
		}

		-- Section Title Text
		local sectionTitle = Create("TextLabel"){
			Name = "SectionTitle",
			Text = sectionName,
			Font = FONTS.Primary,
			TextSize = 16,
			TextColor3 = THEME.PrimaryText,
			BackgroundTransparency = 1,
			Size = UDim2.new(1, -(UI_INTERNAL_PADDING.Offset * 2), 0, 20), -- Use internal padding for width calc
			TextXAlignment = Enum.TextXAlignment.Left,
			Position = UDim2.new(0, UI_INTERNAL_PADDING.Offset, 0, 8), -- Position based on padding
			Parent = sectionFrame
		}
		-- Underline below the Section Title
		local titleUnderline = Create("Frame"){
			Name = "Underline",
			Size = UDim2.new(1, -(UI_INTERNAL_PADDING.Offset * 2), 0, 1), -- Use internal padding for width calc
			Position = UDim2.new(0, UI_INTERNAL_PADDING.Offset, 0, sectionTitle.Position.Y.Offset + sectionTitle.Size.Y.Offset + 3), -- Position below title
			BackgroundColor3 = THEME.AccentDimmed, -- Use dimmed accent for underline
			BorderSizePixel = 0,
			Parent = sectionFrame
		}

		--== Element Creation Methods within Section ==--

		function sectionObject:CreateButton(buttonText, callback)
			buttonText = buttonText or "Button"
			callback = callback or function() print(buttonText .. " clicked") end

			local button = Create("TextButton"){
				Name = "ZexiumButton",
				Text = buttonText,
				Font = FONTS.Secondary,
				TextSize = 14,
				TextColor3 = THEME.PrimaryText,
				BackgroundColor3 = THEME.InputBackground, -- Use input background for buttons
				Size = UDim2.new(1, 0, 0, 35), -- Full width, fixed height
				Parent = sectionFrame,
                AutoButtonColor = false
			}
			ApplyStandardRounding(button)
			ApplyAccentStroke(button, THEME.AccentDimmed) -- Dimmed border initially

			button.MouseButton1Click:Connect(callback) -- Connect the callback

			-- Hover Effects for Button
			button.MouseEnter:Connect(function()
				button.BackgroundColor3 = THEME.Hover
				local stroke = button:FindFirstChildWhichIsA("UIStroke")
				if stroke then stroke.Color = THEME.Accent end -- Brighten border on hover
			end)
			button.MouseLeave:Connect(function()
				button.BackgroundColor3 = THEME.InputBackground
				local stroke = button:FindFirstChildWhichIsA("UIStroke")
				if stroke then stroke.Color = THEME.AccentDimmed end -- Reset border on leave
			end)
			return button
		end

		function sectionObject:CreateSlider(sliderName, options, callback)
			sliderName = sliderName or "Slider"
			options = options or {}
			local minVal = options.Min or 0
            local maxVal = options.Max or 100
            local defaultVal = math.clamp(options.DefaultValue or minVal, minVal, maxVal) -- Ensure default is within range
			callback = callback or function(val) print(sliderName .. " value:", val) end

			-- Container for slider elements
			local container = Create("Frame"){
				Name = sliderName .. "SliderContainer",
				Size = UDim2.new(1, 0, 0, 55), -- Fixed height for label, track, spacing
				BackgroundTransparency = 1,
				Parent = sectionFrame
			}
			-- Label for slider name
			local nameLabel = Create("TextLabel"){
				Name = "SliderName", Text = sliderName, TextSize = 14, Font = FONTS.Secondary, TextColor3 = THEME.PrimaryText, BackgroundTransparency = 1,
				Size = UDim2.new(0.7, -5, 0, 20), Position = UDim2.new(0,0,0,0), TextXAlignment = Enum.TextXAlignment.Left, Parent = container
			}
			-- Label to display current value
			local valueLabel = Create("TextLabel"){
				Name = "SliderValue", Text = tostring(defaultVal), TextSize = 14, Font = FONTS.Secondary, TextColor3 = THEME.SecondaryText, BackgroundTransparency = 1,
				Size = UDim2.new(0.3, 0, 0, 20), Position = UDim2.new(0.7, 5, 0, 0), TextXAlignment = Enum.TextXAlignment.Right, Parent = container
			}
			-- Background Track for the slider
			local track = Create("Frame"){
				Name = "Track", Size = UDim2.new(1, 0, 0, 8), Position = UDim2.new(0,0,0,28), -- Positioned below labels
				BackgroundColor3 = THEME.Background, -- Darker background for track
                ClipsDescendants = true, -- Clip the fill and thumb
				Parent = container
			}
			ApplyStandardRounding(track)
			-- Fill bar indicating the current value
			local fill = Create("Frame"){
				Name = "Fill", Size = UDim2.new(0,0,1,0), BackgroundColor3 = THEME.Accent, BorderSizePixel = 0, Parent = track
			}
			ApplyStandardRounding(fill) -- Apply rounding to fill as well
			-- Draggable Thumb/Handle
			local thumb = Create("Frame"){
				Name = "Thumb",
                AnchorPoint = Vector2.new(0.5,0.5),
                -- Position will be set by updateSlider, start centered vertically at the beginning of fill
                Position = UDim2.new(0, 0, 0.5, 0),
				Size = UDim2.new(0, 16, 0, 16), -- Slightly larger thumb
                BackgroundColor3 = THEME.PrimaryText, -- White thumb
                Parent = fill -- Parent to fill for easier positioning relative to fill end
			}
			ApplyStandardRounding(thumb) -- Round thumb
			ApplyAccentStroke(thumb, THEME.Background, 1.5) -- Add stroke matching track background for contrast

			local currentValue = defaultVal

			-- Function to update slider visuals and call callback
			local function updateSlider(percent)
				percent = math.clamp(percent, 0, 1)
                local newValue = math.floor(minVal + (maxVal - minVal) * percent + 0.5) -- Calculate integer value

                -- Only update if value actually changed
                if newValue ~= currentValue then
                    currentValue = newValue -- Update stored value
                    fill.Size = UDim2.new(percent, 0, 1, 0)
                    -- Thumb position: Scale=1 puts it at the end of the fill frame, Offset centers it vertically
                    thumb.Position = UDim2.new(1, 0, 0.5, 0)
                    valueLabel.Text = tostring(newValue)
                    pcall(callback, newValue) -- Safely call the callback
                end
			end

			-- Initialize slider position
			updateSlider((defaultVal - minVal) / math.max(1, maxVal - minVal)) -- Avoid division by zero if min=max

			local draggingSlider = false
            local trackInputConn = nil -- Connection for mouse movement while dragging

			-- Handle dragging start
			track.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    draggingSlider = true
                    -- Mark input as processed to prevent window drag
                    UserInputService:CaptureInput(input)
                    -- Calculate initial position based on click
                    local relativeX = input.Position.X - track.AbsolutePosition.X
                    local percent = math.clamp(relativeX / track.AbsoluteSize.X, 0, 1)
                    updateSlider(percent)

                    -- Disconnect previous connection if it exists
                    if trackInputConn then trackInputConn:Disconnect() end

                    -- Connect to global input changes for smooth dragging
                    trackInputConn = UserInputService.InputChanged:Connect(function(inputChanged)
                        if draggingSlider and (inputChanged.UserInputType == Enum.UserInputType.MouseMovement or inputChanged.UserInputType == Enum.UserInputType.Touch) then
                            local currentRelativeX = inputChanged.Position.X - track.AbsolutePosition.X
                            local currentPercent = math.clamp(currentRelativeX / track.AbsoluteSize.X, 0, 1)
                            updateSlider(currentPercent)
                        end
                    end)
                end
			end)

			-- Handle dragging end
			track.InputEnded:Connect(function(input)
                if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and draggingSlider then
                    draggingSlider = false
                    UserInputService:ReleaseInput(input) -- Release input capture
                    -- Disconnect the movement listener
                    if trackInputConn then
                        trackInputConn:Disconnect()
                        trackInputConn = nil
                    end
                end
            end)

			return container
		end

		function sectionObject:CreateDropdown(dropdownName, options, callback)
			dropdownName = dropdownName or "Dropdown"
			options = options or {}
			local listItems = options.List or {"Option 1", "Option 2", "Option 3"}
			local defaultItem = options.Default
			callback = callback or function(item) print(dropdownName .. " selected:", item) end
			local isOpen = false
            local currentSelection = nil

			-- Main container, allows list to overflow when open
			local container = Create("Frame"){
				Name = dropdownName .. "DropdownContainer",
                Size = UDim2.new(1, 0, 0, 35), -- Height matches button
                ClipsDescendants = true, -- Clip initially
				BackgroundTransparency = 1,
                ZIndex = 2, -- Base ZIndex
                Parent = sectionFrame
			}
			-- Button to display selection and toggle list
			local button = Create("TextButton"){
				Name = "DropdownButton",
                Text = "Select...", -- Placeholder/Default Text
                Size = UDim2.new(1, 0, 1, 0), -- Full size of container
				BackgroundColor3 = THEME.InputBackground,
                Font = FONTS.Secondary,
				TextSize = 14,
                TextColor3 = THEME.PrimaryText,
                TextXAlignment = Enum.TextXAlignment.Left, -- Align text left
                TextTruncate = Enum.TextTruncate.AtEnd, -- Truncate if too long
                Parent = container,
                AutoButtonColor = false
			}
            local buttonPadding = Create("UIPadding"){ PaddingLeft = UI_INTERNAL_PADDING, PaddingRight = UDim.new(0, 25), Parent = button } -- Padding for text + arrow space
			ApplyStandardRounding(button)
			ApplyAccentStroke(button, THEME.AccentDimmed) -- Default border

			-- Arrow indicator
			local arrow = Create("TextLabel"){
				Name = "Arrow", Text = "▼", Size = UDim2.new(0, 20, 1, 0),
                AnchorPoint = Vector2.new(1, 0.5), Position = UDim2.new(1, -UI_INTERNAL_PADDING.Offset / 2, 0.5, 0), -- Positioned right with padding
				Font = FONTS.Primary, TextSize = 14, BackgroundTransparency = 1, TextColor3 = THEME.SecondaryText, TextXAlignment = Enum.TextXAlignment.Center,
                ZIndex = 4, Parent = button -- Ensure arrow is above button background
			}
			-- Scrolling frame for dropdown items
			local itemScroll = Create("ScrollingFrame"){
				Name = "ItemScroll",
                Position = UDim2.new(0, 0, 1, 3), -- Position below button with small gap
                Size = UDim2.new(1, 0, 0, 0), -- Initial height 0
                Visible = false, -- Initially hidden
				BackgroundColor3 = THEME.LighterBackground, -- Slightly different background for list
                BorderSizePixel = 0,
                BorderColor3 = THEME.AccentDimmed,
				ScrollBarImageColor3 = THEME.AccentDimmed, ScrollBarThickness = 4,
                ScrollingDirection = Enum.ScrollingDirection.Y,
                AutomaticCanvasSize = Enum.AutomaticSize.Y,
                CanvasSize = UDim2.new(0,0,0,0),
				ZIndex = 5, -- High ZIndex to appear above everything
                Parent = container
			}
			ApplyStandardRounding(itemScroll)
            ApplyAccentStroke(itemScroll, THEME.AccentDimmed) -- Border for the list

			-- Layout and padding for items within the scroll frame
			local itemListLayout = Create("UIListLayout"){ Padding = UDim.new(0, 2), SortOrder = Enum.SortOrder.LayoutOrder, Parent = itemScroll }
            local itemPadding = Create("UIPadding"){ Padding = UDim.new(0, 4), Parent = itemScroll } -- Padding around items

            -- Function to update the button text
			local function setDropdownText(text)
                button.Text = text or "Select..."
                currentSelection = text
            end

            -- Function to close the dropdown list
            local function closeDropdown(fireCallback)
                if not isOpen then return end -- Already closed
                isOpen = false
                arrow.Text = "▼"
                container.ZIndex = 2 -- Reset ZIndex

                -- Animate closing
                itemScroll:TweenSize(UDim2.new(1,0,0,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.15, true, function()
                    if not isOpen then -- Ensure it wasn't reopened during tween
                        itemScroll.Visible = false
                        container.ClipsDescendants = true -- Re-enable clipping
                    end
                end)

                if fireCallback and currentSelection then
                     pcall(callback, currentSelection)
                end
            end

            -- Function to open the dropdown list
            local function openDropdown()
                if isOpen then return end -- Already open
                isOpen = true
                arrow.Text = "▲"
                container.ZIndex = 10 -- Bring container to front
                container.ClipsDescendants = false -- Allow list to show
                itemScroll.Visible = true

                -- Calculate target height after items are potentially added/rendered
                task.defer(function()
                    local itemCount = 0
                    for _, child in ipairs(itemScroll:GetChildren()) do
                        if child:IsA("TextButton") then itemCount = itemCount + 1 end
                    end
                    local itemHeight = 28 -- Height of each item button
                    local listPadding = itemListLayout.Padding.Offset
                    local framePadding = itemPadding.PaddingTop.Offset + itemPadding.PaddingBottom.Offset

                    local neededHeight = (itemCount * itemHeight) + math.max(0, itemCount - 1) * listPadding + framePadding
                    local scrollHeight = math.min(neededHeight, 150) -- Max height 150px

                    -- Animate opening
                    itemScroll:TweenSize(UDim2.new(1, 0, 0, scrollHeight), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
                end)
            end

            -- Toggle dropdown on button click
			button.MouseButton1Click:Connect(function()
                if isOpen then closeDropdown(false) else openDropdown() end
            end)
            -- Close dropdown if clicked outside
            UserInputService.InputBegan:Connect(function(input)
                if isOpen and input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local objects = playerGui:GetGuiObjectsAtPosition(input.Position.X, input.Position.Y)
                    local clickedInside = false
                    for _, obj in ipairs(objects) do
                        if obj == container or obj:IsDescendantOf(container) then
                            clickedInside = true
                            break
                        end
                    end
                    if not clickedInside then
                        closeDropdown(false)
                    end
                end
            end)

			-- Populate dropdown items
			for _, itemName in ipairs(listItems) do
				local itemButton = Create("TextButton"){
					Name = itemName, Text = itemName, Size = UDim2.new(1, 0, 0, 28), -- Fixed item height
                    Font = FONTS.Secondary, TextSize = 14, TextColor3 = THEME.PrimaryText,
					BackgroundColor3 = THEME.InputBackground, -- Slightly lighter than scroll bg
                    TextXAlignment = Enum.TextXAlignment.Left,
					Parent = itemScroll,
                    AutoButtonColor = false,
                    LayoutOrder = #itemScroll:GetChildren() -- Maintain order
				}
                local itemButtonPadding = Create("UIPadding"){ PaddingLeft = UI_INTERNAL_PADDING, Parent = itemButton } -- Indent item text
                ApplyStandardRounding(itemButton) -- Round items

				itemButton.MouseEnter:Connect(function() itemButton.BackgroundColor3 = THEME.Hover end)
				itemButton.MouseLeave:Connect(function() itemButton.BackgroundColor3 = THEME.InputBackground end)
				itemButton.MouseButton1Click:Connect(function()
					setDropdownText(itemName)
					closeDropdown(true) -- Close and fire callback
				end)
			end

            -- Set initial value if default is provided
			if defaultItem and table.find(listItems, defaultItem) then
                setDropdownText(defaultItem)
                -- Optionally fire callback immediately for default value
                -- pcall(callback, defaultItem)
            else
                setDropdownText(nil) -- Show placeholder if no valid default
            end

			return container
		end

		function sectionObject:CreateParagraph(paragraphTitle, paragraphMessage, _lineCountIgnored) -- lineCount is ignored, using AutomaticSize
			paragraphTitle = paragraphTitle or "Information"
			paragraphMessage = paragraphMessage or "This is some default informational text."

			-- Container for title and message
			local container = Create("Frame"){
				Name = paragraphTitle .. "ParagraphContainer",
                Size = UDim2.new(1, 0, 0, 0), -- Auto height
                AutomaticSize = Enum.AutomaticSize.Y,
				BackgroundTransparency = 1,
                Parent = sectionFrame
			}
			-- Layout for vertical spacing
			local listLayout = Create("UIListLayout"){
                Padding = UDim.new(0, 4), -- Spacing between title and message
                SortOrder = Enum.SortOrder.LayoutOrder,
                Parent = container
            }

			-- Paragraph Title
			local titleLabel = Create("TextLabel"){
				Name = "ParagraphTitle", Text = paragraphTitle, Font = FONTS.Primary, TextSize = 15, TextColor3 = THEME.PrimaryText,
				BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 18), TextXAlignment = Enum.TextXAlignment.Left, LayoutOrder = 1, Parent = container
			}
			-- Paragraph Message Body
			local messageLabel = Create("TextLabel"){
				Name = "ParagraphMessage", Text = paragraphMessage, Font = FONTS.Secondary, TextSize = 13, TextColor3 = THEME.SecondaryText,
				BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, -- Auto height
                TextWrapped = true, -- Enable wrapping
				TextXAlignment = Enum.TextXAlignment.Left, TextYAlignment = Enum.TextYAlignment.Top, LayoutOrder = 2, Parent = container
			}
			return container
		end

		-- Return the section object containing its methods
		return sectionObject
	end

	-- Return the page object containing its methods
	return pageObject
end

-- Return the main UI library table
return ZexiumUI
