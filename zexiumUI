local ZexiumUI = {}
ZexiumUI.__index = ZexiumUI

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService") -- For potential future use, not used now

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local THEME = {
    Background        = Color3.fromRGB(18, 18, 18),    -- Very dark grey, almost black
    LighterBackground = Color3.fromRGB(28, 28, 28),    -- For elements like sections, tabs
    InputBackground   = Color3.fromRGB(35, 35, 35),    -- Slightly lighter dark grey for inputs
    PrimaryText       = Color3.fromRGB(255, 255, 255), -- White
    SecondaryText     = Color3.fromRGB(160, 160, 160), -- Light grey for placeholders/secondary info
    Accent            = Color3.fromRGB(255, 255, 255), -- White accent (for borders, highlights, selected states)
    AccentDimmed      = Color3.fromRGB(180, 180, 180), -- For non-active accents
    ErrorText         = Color3.fromRGB(255, 80, 80),   -- Red for errors
    SuccessText       = Color3.fromRGB(80, 255, 120),  -- Green for success
    Hover             = Color3.fromRGB(45, 45, 45)     -- For hover states
}

local FONTS = {
    Primary = Enum.Font.GothamSemibold,
    Secondary = Enum.Font.Gotham,
    Monospace = Enum.Font.Code -- Or SourceCodePro
}

local UI_SCALE = 1
local UI_CORNER_RADIUS = UDim.new(0, 6)
local UI_STROKE_THICKNESS = 1.5
local UI_ELEMENT_PADDING = UDim.new(0, 8)
local UI_SECTION_PADDING = UDim.new(0, 12)

local function Create(instanceType)
    return function(data)
        local obj = Instance.new(instanceType)
        for k, v in pairs(data) do
            obj[k] = v
        end
        if obj:IsA("GuiObject") then
            if not data.Font and obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
                 obj.Font = FONTS.Secondary
            end
            if not data.TextColor3 and obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
                 obj.TextColor3 = THEME.PrimaryText
            end
            if not data.BackgroundColor3 then
                obj.BackgroundColor3 = THEME.InputBackground
            end
            if not data.BorderSizePixel then
                 obj.BorderSizePixel = 0
            end
        end
        return obj
    end
end

local function ApplyStandardRounding(guiObject)
    if guiObject:FindFirstChildOfClass("UICorner") then return end
    Create("UICorner"){
        CornerRadius = UI_CORNER_RADIUS,
        Parent = guiObject
    }
end

local function ApplyAccentStroke(guiObject, color)
    if guiObject:FindFirstChildOfClass("UIStroke") then guiObject:FindFirstChildOfClass("UIStroke"):Destroy() end
    Create("UIStroke"){
        Color = color or THEME.Accent,
        Thickness = UI_STROKE_THICKNESS,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Parent = guiObject
    }
end

local function EnableDragging(guiObject, dragHandle)
    dragHandle = dragHandle or guiObject
    local dragging = false
    local dragInput, mousePosStart, framePosStart

    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            mousePosStart = input.Position
            framePosStart = guiObject.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragHandle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging and mousePosStart and framePosStart then
            local delta = input.Position - mousePosStart
            guiObject.Position = UDim2.new(framePosStart.X.Scale, framePosStart.X.Offset + delta.X, framePosStart.Y.Scale, framePosStart.Y.Offset + delta.Y)
        end
    end)
end

function ZexiumUI:CreateWindow(titleText, subtitleText, showIntro)
    local self = setmetatable({}, ZexiumUI)

    if playerGui:FindFirstChild("ZexiumUI_Instance") then
        playerGui.ZexiumUI_Instance:Destroy()
    end

    self.ScreenGui = Create("ScreenGui"){
        Name = "ZexiumUI_Instance",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        Parent = playerGui
    }

    self.MainWindow = Create("Frame"){
        Name = "MainWindow",
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 650, 0, 450),
        BackgroundColor3 = THEME.Background,
        ClipsDescendants = true,
        Parent = self.ScreenGui,
        Visible = not showIntro -- Start invisible if intro is true
    }
    ApplyStandardRounding(self.MainWindow)

    EnableDragging(self.MainWindow)

    local Header = Create("Frame"){
        Name = "Header",
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundColor3 = THEME.LighterBackground,
        Parent = self.MainWindow
    }
    ApplyStandardRounding(Header) -- Apply rounding only to top corners visually
    local headerCover = Create("Frame"){ Name = "HeaderCover", BackgroundColor3 = THEME.LighterBackground, Size = UDim2.new(1,0,0.5,0), Position = UDim2.new(0,0,0.5,0), Parent = Header}


    local Title = Create("TextLabel"){
        Name = "Title",
        Size = UDim2.new(0.9, 0, 0, 25),
        Position = UDim2.new(0.5, 0, 0.35, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Text = titleText or "ZexiumUI",
        Font = FONTS.Primary,
        TextSize = 20,
        TextColor3 = THEME.PrimaryText,
        BackgroundTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = Header
    }

    local Subtitle = Create("TextLabel"){
        Name = "Subtitle",
        Size = UDim2.new(0.9, 0, 0, 15),
        Position = UDim2.new(0.5, 0, 0.75, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Text = subtitleText or "",
        Font = FONTS.Secondary,
        TextSize = 12,
        TextColor3 = THEME.SecondaryText,
        BackgroundTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = Header
    }

    local MainContent = Create("Frame"){
        Name = "MainContent",
        Size = UDim2.new(1, 0, 1, -Header.Size.Y.Offset),
        Position = UDim2.new(0, 0, 0, Header.Size.Y.Offset),
        BackgroundTransparency = 1,
        Parent = self.MainWindow
    }

    self.TabContainer = Create("Frame"){
        Name = "TabContainer",
        Size = UDim2.new(0, 130, 1, -10),
        Position = UDim2.new(0, 5, 0, 5),
        BackgroundColor3 = THEME.LighterBackground,
        Parent = MainContent
    }
    ApplyStandardRounding(self.TabContainer)

    local tabListLayout = Create("UIListLayout"){
        Padding = UDim.new(0, 5),
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = self.TabContainer
    }
    local tabPadding = Create("UIPadding"){
        PaddingTop = UDim.new(0,5), PaddingBottom = UDim.new(0,5),
        PaddingLeft = UDim.new(0,5), PaddingRight = UDim.new(0,5),
        Parent = self.TabContainer
    }

    self.PageContainer = Create("Frame"){
        Name = "PageContainer",
        Size = UDim2.new(1, -(self.TabContainer.Size.X.Offset + 15), 1, -10),
        Position = UDim2.new(0, self.TabContainer.Size.X.Offset + 10, 0, 5),
        BackgroundTransparency = 1,
        ClipsDescendants = true,
        Parent = MainContent
    }
    self.UIPageLayout = Create("UIPageLayout"){
        SortOrder = Enum.SortOrder.LayoutOrder,
        EasingStyle = Enum.EasingStyle.Cubic,
        EasingDirection = Enum.EasingDirection.Out,
        TweenTime = 0.3,
        Parent = self.PageContainer
    }
    self.pages = {}
    self.tabButtons = {}
    self.activeTabButton = nil

    if showIntro then
        self.MainWindow.Position = UDim2.new(0.5, 0, 0.45, 0)
        local transparencyProxy = Instance.new("NumberValue")
        transparencyProxy.Value = 1
        transparencyProxy.Changed:Connect(function(val)
            self.MainWindow.BackgroundTransparency = val
            Header.BackgroundTransparency = val
            Title.TextTransparency = val
            Subtitle.TextTransparency = val
            self.TabContainer.BackgroundTransparency = val
            for _,btn in pairs(self.tabButtons) do btn.BackgroundTransparency = val; btn.TextTransparency = val end
        end)
        
        local introTween = TweenService:Create(self.MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), {Position = UDim2.new(0.5,0,0.5,0)})
        local fadeTween = TweenService:Create(transparencyProxy, TweenInfo.new(0.4, Enum.EasingStyle.Linear), {Value = 0})
        
        task.wait(0.1)
        self.MainWindow.Visible = true
        introTween:Play()
        fadeTween:Play()
        introTween.Completed:Connect(function() transparencyProxy:Destroy() end)
    end

    return self
end

function ZexiumUI:CreatePage(pageName)
    local pageObject = {}
    pageName = pageName or "Page"

    local pageFrame = Create("ScrollingFrame"){
        Name = pageName .. "_Content",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarImageColor3 = THEME.Accent,
        ScrollBarThickness = 4,
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        CanvasSize = UDim2.new(0,0,0,0),
        LayoutOrder = #self.pages + 1,
        Parent = self.PageContainer
    }
    local pageListLayout = Create("UIListLayout"){
        Padding = UI_SECTION_PADDING,
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = pageFrame
    }
    local pageContentPadding = Create("UIPadding"){
        PaddingTop = UI_SECTION_PADDING, PaddingBottom = UI_SECTION_PADDING,
        PaddingLeft = UI_SECTION_PADDING, PaddingRight = UI_SECTION_PADDING,
        Parent = pageFrame
    }

    table.insert(self.pages, pageFrame)
    pageObject.frame = pageFrame
    pageObject.sections = {}

    local tabButton = Create("TextButton"){
        Name = pageName .. "_Tab",
        Text = string.upper(pageName),
        Font = FONTS.Primary,
        TextSize = 14,
        TextColor3 = THEME.SecondaryText,
        BackgroundColor3 = THEME.Background,
        Size = UDim2.new(1, 0, 0, 35),
        LayoutOrder = #self.tabButtons + 1,
        Parent = self.TabContainer
    }
    ApplyStandardRounding(tabButton)

    table.insert(self.tabButtons, tabButton)

    if not self.activeTabButton then
        self.activeTabButton = tabButton
        tabButton.TextColor3 = THEME.PrimaryText
        ApplyAccentStroke(tabButton, THEME.Accent)
        self.UIPageLayout:JumpTo(pageFrame)
    end

    tabButton.MouseButton1Click:Connect(function()
        if self.activeTabButton == tabButton then return end

        if self.activeTabButton then
            self.activeTabButton.TextColor3 = THEME.SecondaryText
            if self.activeTabButton:FindFirstChildOfClass("UIStroke") then
                 self.activeTabButton:FindFirstChildOfClass("UIStroke"):Destroy()
            end
        end
        tabButton.TextColor3 = THEME.PrimaryText
        ApplyAccentStroke(tabButton, THEME.Accent)
        self.activeTabButton = tabButton
        self.UIPageLayout:JumpTo(pageFrame)
    end)
    
    tabButton.MouseEnter:Connect(function() if self.activeTabButton ~= tabButton then tabButton.BackgroundColor3 = THEME.Hover end end)
    tabButton.MouseLeave:Connect(function() if self.activeTabButton ~= tabButton then tabButton.BackgroundColor3 = THEME.Background end end)


    function pageObject:CreateSection(sectionName)
        local sectionObject = {}
        sectionName = sectionName or "Section"

        local sectionFrame = Create("Frame"){
            Name = sectionName,
            Size = UDim2.new(1, -10, 0, 50),
            AutomaticSize = Enum.AutomaticSize.Y,
            BackgroundColor3 = THEME.LighterBackground,
            Parent = pageObject.frame
        }
        ApplyStandardRounding(sectionFrame)
        table.insert(pageObject.sections, sectionFrame)

        local sectionListLayout = Create("UIListLayout"){
            Padding = UI_ELEMENT_PADDING,
            FillDirection = Enum.FillDirection.Vertical,
            HorizontalAlignment = Enum.HorizontalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = sectionFrame
        }
        local sectionContentPadding = Create("UIPadding"){
            PaddingTop = UDim.new(0,15), PaddingBottom = UI_ELEMENT_PADDING,
            PaddingLeft = UI_ELEMENT_PADDING, PaddingRight = UI_ELEMENT_PADDING,
            Parent = sectionFrame
        }

        local sectionTitle = Create("TextLabel"){
            Name = "SectionTitle",
            Text = sectionName,
            Font = FONTS.Primary,
            TextSize = 16,
            TextColor3 = THEME.PrimaryText,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -10, 0, 20),
            TextXAlignment = Enum.TextXAlignment.Left,
            Position = UDim2.new(0,5,0,0),
            Parent = sectionFrame
        }
        local titleUnderline = Create("Frame"){
            Name = "Underline",
            Size = UDim2.new(1, -10, 0, 1),
            Position = UDim2.new(0,5,0, sectionTitle.Size.Y.Offset + 2),
            BackgroundColor3 = THEME.AccentDimmed,
            BorderSizePixel = 0,
            Parent = sectionFrame
        }
        sectionListLayout.Padding = UDim.new(0, sectionTitle.Size.Y.Offset + 2 + 5 + UI_ELEMENT_PADDING.Offset)


        function sectionObject:CreateButton(buttonText, callback)
            buttonText = buttonText or "Button"
            callback = callback or function() end

            local button = Create("TextButton"){
                Name = "ZexiumButton",
                Text = buttonText,
                Font = FONTS.Secondary,
                TextSize = 14,
                BackgroundColor3 = THEME.InputBackground,
                Size = UDim2.new(1, 0, 0, 35),
                Parent = sectionFrame
            }
            ApplyStandardRounding(button)
            ApplyAccentStroke(button, THEME.AccentDimmed)

            button.MouseButton1Click:Connect(callback)
            button.MouseEnter:Connect(function() button.BackgroundColor3 = THEME.Hover; if button:FindFirstChildOfClass("UIStroke") then button:FindFirstChildOfClass("UIStroke").Color = THEME.Accent end end)
            button.MouseLeave:Connect(function() button.BackgroundColor3 = THEME.InputBackground; if button:FindFirstChildOfClass("UIStroke") then button:FindFirstChildOfClass("UIStroke").Color = THEME.AccentDimmed end end)
            return button
        end

        function sectionObject:CreateSlider(sliderName, options, callback)
            sliderName = sliderName or "Slider"
            options = options or {}
            local minVal, maxVal, defaultVal = options.Min or 0, options.Max or 100, options.DefaultValue or 0
            callback = callback or function(val) end

            local container = Create("Frame"){
                Name = sliderName .. "SliderContainer",
                Size = UDim2.new(1, 0, 0, 55),
                BackgroundTransparency = 1,
                Parent = sectionFrame
            }
            local nameLabel = Create("TextLabel"){
                Name = "SliderName", Text = sliderName, TextSize = 14, BackgroundTransparency = 1,
                Size = UDim2.new(0.7, -5, 0, 20), TextXAlignment = Enum.TextXAlignment.Left, Parent = container
            }
            local valueLabel = Create("TextLabel"){
                Name = "SliderValue", Text = tostring(defaultVal), TextSize = 14, BackgroundTransparency = 1,
                Size = UDim2.new(0.3, 0, 0, 20), Position = UDim2.new(0.7, 5, 0, 0), TextXAlignment = Enum.TextXAlignment.Right, Parent = container
            }
            local track = Create("Frame"){
                Name = "Track", Size = UDim2.new(1, 0, 0, 8), Position = UDim2.new(0,0,0,25),
                BackgroundColor3 = THEME.Background, Parent = container
            }
            ApplyStandardRounding(track)
            local fill = Create("Frame"){
                Name = "Fill", Size = UDim2.new(0,0,1,0), BackgroundColor3 = THEME.Accent, Parent = track
            }
            ApplyStandardRounding(fill)
            local thumb = Create("Frame"){
                Name = "Thumb", AnchorPoint = Vector2.new(0.5,0.5), Position = UDim2.new(0,0,0.5,0),
                Size = UDim2.new(0,16,0,16), BackgroundColor3 = THEME.PrimaryText, Parent = fill
            }
            ApplyStandardRounding(thumb)
            ApplyAccentStroke(thumb, THEME.Background)

            local function updateSlider(percent)
                percent = math.clamp(percent, 0, 1)
                fill.Size = UDim2.new(percent, 0, 1, 0)
                thumb.Position = UDim2.new(1,0,0.5,0)
                local value = math.floor(minVal + (maxVal - minVal) * percent + 0.5)
                valueLabel.Text = tostring(value)
                pcall(callback, value)
            end
            updateSlider((defaultVal - minVal) / (maxVal - minVal))

            local draggingSlider = false
            track.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then draggingSlider = true updateSlider((input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X) end
            end)
            track.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then draggingSlider = false end end)
            UserInputService.InputChanged:Connect(function(input)
                if draggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then updateSlider((input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X) end
            end)
            return container
        end
        
        function sectionObject:CreateDropdown(dropdownName, options, callback)
            dropdownName = dropdownName or "Dropdown"
            options = options or {}
            local listItems = options.List or {}
            local defaultItem = options.Default
            callback = callback or function(item) end
            local isOpen = false

            local container = Create("Frame"){
                Name = dropdownName .. "DropdownContainer", Size = UDim2.new(1,0,0,35), ClipsDescendants = false,
                BackgroundTransparency = 1, ZIndex = 2, Parent = sectionFrame
            }
            local button = Create("TextButton"){
                Name = "DropdownButton", Text = "Select...", Size = UDim2.new(1,0,1,0),
                BackgroundColor3 = THEME.InputBackground, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, Parent = container
            }
            ApplyStandardRounding(button)
            ApplyAccentStroke(button, THEME.AccentDimmed)
            local arrow = Create("TextLabel"){
                Name = "Arrow", Text = "▼", Size = UDim2.new(0,20,1,0), AnchorPoint = Vector2.new(1,0), Position = UDim2.new(1,-5,0,0),
                Font = FONTS.Primary, TextSize = 12, BackgroundTransparency = 1, TextColor3 = THEME.SecondaryText, Parent = button
            }
            local itemScroll = Create("ScrollingFrame"){
                Name = "ItemScroll", Position = UDim2.new(0,0,1,5), Size = UDim2.new(1,0,0,0), Visible = false,
                BackgroundColor3 = THEME.InputBackground, BorderSizePixel = 1, BorderColor3 = THEME.AccentDimmed,
                ScrollBarImageColor3 = THEME.Accent, ScrollBarThickness = 4, ZIndex = 3, Parent = container
            }
            ApplyStandardRounding(itemScroll)
            local itemListLayout = Create("UIListLayout"){ Padding = UDim.new(0,2), Parent = itemScroll }

            local function setDropdownText(text) button.Text = "  " .. text end
            if defaultItem and table.find(listItems, defaultItem) then setDropdownText(defaultItem); pcall(callback, defaultItem) else setDropdownText(dropdownName) end

            local function toggleDropdown()
                isOpen = not isOpen
                itemScroll.Visible = isOpen
                arrow.Text = isOpen and "▲" or "▼"
                local itemCount = #itemScroll:GetChildren() - 1 
                local scrollHeight = math.min(itemCount * 30 + (#itemScroll:GetChildren() > 1 and (#itemScroll:GetChildren()-2)*itemListLayout.Padding.Offset or 0) + 10, 120)
                itemScroll.Size = UDim2.new(1,0,0,scrollHeight)
                container.ClipsDescendants = not isOpen
                if isOpen then itemScroll:TweenSize(UDim2.new(1,0,0,scrollHeight), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
                else itemScroll:TweenSize(UDim2.new(1,0,0,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true) end
            end
            button.MouseButton1Click:Connect(toggleDropdown)

            for _, itemName in ipairs(listItems) do
                local itemButton = Create("TextButton"){
                    Name = itemName, Text = "  " .. itemName, Size = UDim2.new(1,0,0,28), TextSize = 14,
                    BackgroundColor3 = THEME.InputBackground, TextColor3 = THEME.PrimaryText, TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = itemScroll
                }
                itemButton.MouseEnter:Connect(function() itemButton.BackgroundColor3 = THEME.Hover end)
                itemButton.MouseLeave:Connect(function() itemButton.BackgroundColor3 = THEME.InputBackground end)
                itemButton.MouseButton1Click:Connect(function()
                    setDropdownText(itemName)
                    pcall(callback, itemName)
                    toggleDropdown()
                end)
            end
            return container
        end

        function sectionObject:CreateParagraph(paragraphTitle, paragraphMessage, _lineCount)
            paragraphTitle = paragraphTitle or "Paragraph"
            paragraphMessage = paragraphMessage or "Default message."
            
            local container = Create("Frame"){
                Name = paragraphTitle .. "ParagraphContainer", Size = UDim2.new(1,0,0,0), AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundTransparency = 1, Parent = sectionFrame
            }
             local listLayout = Create("UIListLayout"){Padding = UDim.new(0,4), Parent = container}

            local titleLabel = Create("TextLabel"){
                Name = "ParagraphTitle", Text = paragraphTitle, Font = FONTS.Primary, TextSize = 15, TextColor3 = THEME.PrimaryText,
                BackgroundTransparency = 1, Size = UDim2.new(1,0,0,18), TextXAlignment = Enum.TextXAlignment.Left, Parent = container
            }
            local messageLabel = Create("TextLabel"){
                Name = "ParagraphMessage", Text = paragraphMessage, Font = FONTS.Secondary, TextSize = 13, TextColor3 = THEME.SecondaryText,
                BackgroundTransparency = 1, Size = UDim2.new(1,0,0,0), AutomaticSize = Enum.AutomaticSize.Y, TextWrapped = true,
                TextXAlignment = Enum.TextXAlignment.Left, TextYAlignment = Enum.TextYAlignment.Top, Parent = container
            }
            return container
        end
        return sectionObject
    end
    return pageObject
end

return ZexiumUI
