--[[
	ZexiumUI Library - V1.4 (Redesigned)
	Focus on visual consistency, spacing, typography, and refined styling.
]]
local ZexiumUI = {}
ZexiumUI.__index = ZexiumUI

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService") -- Included but not used in this version

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Theme Configuration (Refined Colors)
local THEME = {
	Background        = Color3.fromRGB(20, 20, 20),   -- Slightly lighter main background
	LighterBackground = Color3.fromRGB(30, 30, 30),   -- For Headers, Tabs, Sections
	InputBackground   = Color3.fromRGB(40, 40, 40),   -- For Buttons, Dropdowns, Sliders
	PrimaryText       = Color3.fromRGB(240, 240, 240), -- Slightly off-white text
	SecondaryText     = Color3.fromRGB(150, 150, 150), -- Dimmer secondary text
	Accent            = Color3.fromRGB(220, 220, 220), -- Main accent (active states, highlights)
	AccentDimmed      = Color3.fromRGB(70, 70, 70),   -- Borders, inactive states, underlines
	ErrorText         = Color3.fromRGB(255, 100, 100),
	SuccessText       = Color3.fromRGB(100, 255, 140),
	Hover             = Color3.fromRGB(55, 55, 55)    -- Hover effect background
}

-- Font Configuration
local FONTS = {
	Primary = Enum.Font.GothamSemibold, -- For titles and important text
	Secondary = Enum.Font.Gotham,      -- For body text and standard elements
	Monospace = Enum.Font.Code
}

-- Constants for UI Consistency (Increased Padding)
local UI_CORNER_RADIUS = UDim.new(0, 5)  -- Slightly smaller radius for cleaner look
local UI_STROKE_THICKNESS = 1
local UI_STROKE_THICKNESS_ACTIVE = 1.5 -- For active tab emphasis
local UI_ELEMENT_PADDING = UDim.new(0, 10) -- Padding between elements within a section
local UI_SECTION_PADDING = UDim.new(0, 12) -- Padding between sections on a page
local UI_PAGE_PADDING = UDim.new(0, 15)    -- Padding within the page scroll area content
local UI_INTERNAL_PADDING = UDim.new(0, 12) -- Padding inside containers like sections/tabs

-- Helper function to create instances
local function Create(instanceType)
	return function(data)
		local obj = Instance.new(instanceType)
		for k, v in pairs(data) do
			obj[k] = v
		end
		if obj:IsA("GuiObject") then
			if not data.Font and (obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox")) then
				obj.Font = FONTS.Secondary
			end
			if not data.TextColor3 and (obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox")) then
				obj.TextColor3 = THEME.PrimaryText
			end
			if not data.BackgroundColor3 then
				-- Default backgrounds handled case-by-case
			end
			if not data.BorderSizePixel then
				obj.BorderSizePixel = 0
			end
		end
		return obj
	end
end

-- Helper function to apply standard rounded corners
local function ApplyStandardRounding(guiObject)
	local corner = guiObject:FindFirstChildWhichIsA("UICorner") or Create("UICorner"){ Parent = guiObject }
	corner.CornerRadius = UI_CORNER_RADIUS
end

-- Helper function to apply or update an accent stroke
local function ApplyAccentStroke(guiObject, color, thickness)
	local stroke = guiObject:FindFirstChildWhichIsA("UIStroke")
	if not stroke then
		stroke = Create("UIStroke"){ Parent = guiObject }
	end
	stroke.Color = color or THEME.AccentDimmed -- Default to dimmed accent
	stroke.Thickness = thickness or UI_STROKE_THICKNESS
	stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	return stroke
end

-- Helper function to remove an accent stroke
local function RemoveAccentStroke(guiObject)
	local stroke = guiObject:FindFirstChildWhichIsA("UIStroke")
	if stroke then
		stroke:Destroy()
	end
end

-- Helper function to enable dragging for a GUI object via a handle
local function EnableDragging(guiObject, dragHandle)
	dragHandle = dragHandle or guiObject
	local dragging = false
	local dragInput, mousePosStart, framePosStart

	dragHandle.InputBegan:Connect(function(input)
		local Target = input.UserInputType == Enum.UserInputType.MouseButton1 and UserInputService:GetGuiObjectsAtPosition(input.Position.X, input.Position.Y)[1] or nil

        -- Allow drag only if clicking the handle directly or non-interactive elements on it
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and (not Target or Target == dragHandle or not (Target:IsA("TextButton") or Target:IsA("ImageButton") or Target:IsDescendantOf(dragHandle))) then
            pcall(function() input:SetProcessedByUserInput(true) end) -- Attempt to sink input
			dragging = true
			mousePosStart = input.Position
			framePosStart = guiObject.Position
			local connChanged = UserInputService.InputEnded:Connect(function(endInput)
				if endInput.UserInputType == input.UserInputType then
					dragging = false
                    if connChanged then connChanged:Disconnect() end
                    pcall(function() UserInputService:ReleaseInput(input) end) -- Release sink
				end
			end)
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging and mousePosStart and framePosStart then
			local delta = input.Position - mousePosStart
			guiObject.Position = UDim2.new(framePosStart.X.Scale, framePosStart.X.Offset + delta.X, framePosStart.Y.Scale, framePosStart.Y.Offset + delta.Y)
		end
	end)
end


--[[ Core Window Creation ]]--
function ZexiumUI:CreateWindow(titleText, subtitleText, showIntro)
	local self = setmetatable({}, ZexiumUI)
	self.isMinimized = false

	if playerGui:FindFirstChild("ZexiumUI_Instance") then
		playerGui.ZexiumUI_Instance:Destroy()
	end

	self.ScreenGui = Create("ScreenGui"){
		Name = "ZexiumUI_Instance", ResetOnSpawn = false, ZIndexBehavior = Enum.ZIndexBehavior.Sibling, Parent = playerGui
	}

	-- Main Window Frame
	self.MainWindow = Create("Frame"){
		Name = "MainWindow", AnchorPoint = Vector2.new(0.5, 0.5), Position = UDim2.new(0.5, 0, 0.5, 0),
		Size = UDim2.new(0, 650, 0, 450), BackgroundColor3 = THEME.Background, -- Use main background
		ClipsDescendants = true, Parent = self.ScreenGui, Visible = not showIntro
	}
	ApplyStandardRounding(self.MainWindow)

	-- Header Frame
	local Header = Create("Frame"){
		Name = "Header", Size = UDim2.new(1, 0, 0, 50), BackgroundColor3 = THEME.LighterBackground, -- Use LighterBackground
		ClipsDescendants = true, Parent = self.MainWindow
	}
	ApplyStandardRounding(Header)
	local headerBottomCover = Create("Frame"){ Name = "HeaderBottomCover", BackgroundColor3 = THEME.LighterBackground, Size = UDim2.new(1,0,0.5,0), Position = UDim2.new(0,0,0.5,0), BorderSizePixel = 0, Parent = Header}

	EnableDragging(self.MainWindow, Header)

	-- Title Text
	local Title = Create("TextLabel"){
		Name = "Title", Size = UDim2.new(1, -100, 0, 25), Position = UDim2.new(0.5, 0, 0.38, 0), -- Adjusted vertical position slightly
		AnchorPoint = Vector2.new(0.5, 0.5), Text = titleText or "Zexium UI", Font = FONTS.Primary, TextSize = 21, -- Slightly larger title
		TextColor3 = THEME.PrimaryText, BackgroundTransparency = 1, TextXAlignment = Enum.TextXAlignment.Center, Parent = Header
	}

	-- Subtitle Text
	local Subtitle = Create("TextLabel"){
		Name = "Subtitle", Size = UDim2.new(1, -100, 0, 15), Position = UDim2.new(0.5, 0, 0.72, 0), -- Adjusted vertical position slightly
		AnchorPoint = Vector2.new(0.5, 0.5), Text = subtitleText or "(Zyron)", Font = FONTS.Secondary, TextSize = 13, -- Slightly larger subtitle
		TextColor3 = THEME.SecondaryText, BackgroundTransparency = 1, TextXAlignment = Enum.TextXAlignment.Center, Parent = Header
	}

    -- Minimize Button
    local MinimizeButton = Create("TextButton"){
        Name = "MinimizeButton", AnchorPoint = Vector2.new(1, 0.5), Position = UDim2.new(1, -12, 0.5, 0), -- Centered vertically, more inset
        Size = UDim2.new(0, 28, 0, 28), BackgroundColor3 = THEME.Background, TextColor3 = THEME.SecondaryText,
        Font = FONTS.Primary, Text = "â€”", -- Em dash for minimize looks cleaner
        TextSize = 20, AutoButtonColor = false, Parent = Header
    }
    ApplyStandardRounding(MinimizeButton)
    MinimizeButton.MouseEnter:Connect(function() MinimizeButton.BackgroundColor3 = THEME.Hover end)
    MinimizeButton.MouseLeave:Connect(function() MinimizeButton.BackgroundColor3 = THEME.Background end)

	-- Main Content Area (Wrapper for Tabs and Pages)
	self.MainContent = Create("Frame"){
		Name = "MainContent", Size = UDim2.new(1, 0, 1, -Header.Size.Y.Offset), Position = UDim2.new(0, 0, 0, Header.Size.Y.Offset),
		BackgroundTransparency = 1, ClipsDescendants = true, Parent = self.MainWindow
	}

	-- Tab Container (Left Sidebar)
	self.TabContainer = Create("Frame"){
		Name = "TabContainer", Size = UDim2.new(0, 140, 1, -(UI_INTERNAL_PADDING.Offset * 2)), -- Slightly wider tabs
		Position = UDim2.new(0, UI_INTERNAL_PADDING.Offset, 0, UI_INTERNAL_PADDING.Offset), BackgroundColor3 = THEME.LighterBackground, -- Match header
		Parent = self.MainContent
	}
	ApplyStandardRounding(self.TabContainer)

	-- Layout and Padding for Tab Buttons
	local tabListLayout = Create("UIListLayout"){
		Padding = UDim.new(0, 6), FillDirection = Enum.FillDirection.Vertical, HorizontalAlignment = Enum.HorizontalAlignment.Center,
		SortOrder = Enum.SortOrder.LayoutOrder, Parent = self.TabContainer
	}
	local tabPadding = Create("UIPadding"){
		PaddingTop = UI_INTERNAL_PADDING, PaddingBottom = UI_INTERNAL_PADDING, PaddingLeft = UDim.new(0,8), PaddingRight = UDim.new(0,8), -- Internal padding for tabs
		Parent = self.TabContainer
	}

	-- Page Container (Right Area)
	self.PageContainer = Create("Frame"){
		Name = "PageContainer",
		-- Calculate size and position based on TabContainer's *absolute* size and internal padding
		Size = UDim2.new(1, -(self.TabContainer.AbsoluteSize.X + UI_INTERNAL_PADDING.Offset * 3), 1, -(UI_INTERNAL_PADDING.Offset * 2)),
		Position = UDim2.new(0, self.TabContainer.AbsoluteSize.X + UI_INTERNAL_PADDING.Offset * 2, 0, UI_INTERNAL_PADDING.Offset),
		BackgroundTransparency = 1, -- Let MainWindow background show through
		ClipsDescendants = true, Parent = self.MainContent
	}
	-- UIPageLayout for smooth page transitions
	self.UIPageLayout = Create("UIPageLayout"){
		SortOrder = Enum.SortOrder.LayoutOrder, EasingStyle = Enum.EasingStyle.Cubic, EasingDirection = Enum.EasingDirection.Out,
		TweenTime = 0.25, Parent = self.PageContainer
	}
	self.pages = {}
	self.tabButtons = {}
	self.activeTabButton = nil
    self.originalWindowSize = self.MainWindow.Size

    -- Minimize/Restore Logic
    MinimizeButton.MouseButton1Click:Connect(function()
        self.isMinimized = not self.isMinimized
        local targetSize = self.isMinimized and UDim2.new(self.originalWindowSize.X.Scale, self.originalWindowSize.X.Offset, 0, Header.AbsoluteSize.Y) or self.originalWindowSize
        local targetContentVisibility = not self.isMinimized
        MinimizeButton.Text = self.isMinimized and "â–¡" or "â€”" -- Restore or Minimize symbol

        local sizeTween = TweenService:Create(self.MainWindow, TweenInfo.new(0.2, Enum.EasingStyle.Quad), { Size = targetSize })
        sizeTween:Play()
        self.MainContent.Visible = targetContentVisibility
    end)


	-- Optional Intro Animation
	if showIntro then
		self.MainWindow.Position = UDim2.new(0.5, 0, 0.48, 0)
		local transparencyProxy = Instance.new("NumberValue")
		transparencyProxy.Value = 1
		local fadeElements = {self.MainWindow, Header, Title, Subtitle, MinimizeButton, self.TabContainer, self.MainContent}
		transparencyProxy.Changed:Connect(function(val)
			for _, elem in ipairs(fadeElements) do elem.BackgroundTransparency = val end
			Title.TextTransparency = val
			Subtitle.TextTransparency = val
			MinimizeButton.TextTransparency = val
			for _,btn in pairs(self.tabButtons) do btn.BackgroundTransparency = val; btn.TextTransparency = val end
		end)

		local introTween = TweenService:Create(self.MainWindow, TweenInfo.new(0.4, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), {Position = UDim2.new(0.5,0,0.5,0)})
		local fadeTween = TweenService:Create(transparencyProxy, TweenInfo.new(0.3, Enum.EasingStyle.Linear), {Value = 0})

		task.wait(0.1)
		self.MainWindow.Visible = true
		introTween:Play()
		fadeTween:Play()
		fadeTween.Completed:Connect(function() transparencyProxy:Destroy() end)
	end

	return self
end

--[[ Page Creation ]]--
function ZexiumUI:CreatePage(pageName)
	local pageObject = {}
	pageName = pageName or "Page " .. (#self.pages + 1)

	-- Scrolling Frame for Page Content
	local pageFrame = Create("ScrollingFrame"){
		Name = pageName .. "_Content", Size = UDim2.new(1, 0, 1, 0),
		BackgroundColor3 = THEME.Background, -- **** KEY CHANGE: Page background matches main window ****
		BackgroundTransparency = 0, -- **** KEY CHANGE: Make background visible ****
		BorderSizePixel = 0, ScrollBarImageColor3 = THEME.AccentDimmed, ScrollBarThickness = 6, -- Thicker scrollbar
		ScrollingDirection = Enum.ScrollingDirection.Y, AutomaticCanvasSize = Enum.AutomaticSize.Y,
		CanvasSize = UDim2.new(0,0,0,0), LayoutOrder = #self.pages + 1, Parent = self.PageContainer
	}
	-- List Layout for Sections within the Page
	local pageListLayout = Create("UIListLayout"){
		Padding = UI_SECTION_PADDING, FillDirection = Enum.FillDirection.Vertical, HorizontalAlignment = Enum.HorizontalAlignment.Center,
		SortOrder = Enum.SortOrder.LayoutOrder, Parent = pageFrame
	}
	-- Padding inside the Scrolling Frame Canvas (more generous)
	local pageContentPadding = Create("UIPadding"){
		PaddingTop = UI_PAGE_PADDING, PaddingBottom = UI_PAGE_PADDING, PaddingLeft = UI_PAGE_PADDING, PaddingRight = UI_PAGE_PADDING,
		Parent = pageFrame
	}

	table.insert(self.pages, pageFrame)
	pageObject.frame = pageFrame
	pageObject.sections = {}

	-- Create Corresponding Tab Button
	local tabButton = Create("TextButton"){
		Name = pageName .. "_Tab", Text = string.upper(pageName), Font = FONTS.Primary, TextSize = 15, -- Slightly larger tab text
		TextColor3 = THEME.SecondaryText, BackgroundColor3 = THEME.LighterBackground, -- Match tab container background
		Size = UDim2.new(1, 0, 0, 40), -- Taller tabs
        Position = UDim2.new(0.5, 0, 0, 0), AnchorPoint = Vector2.new(0.5, 0),
		LayoutOrder = #self.tabButtons + 1, Parent = self.TabContainer, AutoButtonColor = false
	}
	ApplyStandardRounding(tabButton)

	table.insert(self.tabButtons, tabButton)

	-- Activate the first page/tab by default
	if not self.activeTabButton then
		self.activeTabButton = tabButton
		tabButton.TextColor3 = THEME.PrimaryText
		ApplyAccentStroke(tabButton, THEME.Accent, UI_STROKE_THICKNESS_ACTIVE) -- Active stroke
		self.UIPageLayout:JumpTo(pageFrame)
	else
        ApplyAccentStroke(tabButton, THEME.AccentDimmed, UI_STROKE_THICKNESS) -- Dimmed stroke for inactive
    end

	-- Tab Button Click Event
	tabButton.MouseButton1Click:Connect(function()
		if self.activeTabButton == tabButton then return end
		if self.activeTabButton then
			self.activeTabButton.TextColor3 = THEME.SecondaryText
			self.activeTabButton.BackgroundColor3 = THEME.LighterBackground
			ApplyAccentStroke(self.activeTabButton, THEME.AccentDimmed, UI_STROKE_THICKNESS) -- Set inactive stroke
		end
		tabButton.TextColor3 = THEME.PrimaryText
        tabButton.BackgroundColor3 = THEME.LighterBackground -- Ensure background stays consistent
		ApplyAccentStroke(tabButton, THEME.Accent, UI_STROKE_THICKNESS_ACTIVE) -- Set active stroke
		self.activeTabButton = tabButton
		self.UIPageLayout:JumpTo(pageFrame)
	end)

	-- Tab Button Hover Effects
	tabButton.MouseEnter:Connect(function()
		if self.activeTabButton ~= tabButton then
			tabButton.BackgroundColor3 = THEME.Hover
            local stroke = tabButton:FindFirstChildWhichIsA("UIStroke")
            if stroke then stroke.Color = THEME.Accent end
		end
	end)
	tabButton.MouseLeave:Connect(function()
		if self.activeTabButton ~= tabButton then
			tabButton.BackgroundColor3 = THEME.LighterBackground
            local stroke = tabButton:FindFirstChildWhichIsA("UIStroke")
            if stroke then stroke.Color = THEME.AccentDimmed end
		end
	end)

	--[[ Section Creation (Method of Page Object) ]]--
	function pageObject:CreateSection(sectionName)
		local sectionObject = {}
		sectionName = sectionName or "Section " .. (#pageObject.sections + 1)

		-- Frame for the Section
		local sectionFrame = Create("Frame"){
			Name = sectionName, Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y,
			BackgroundColor3 = THEME.LighterBackground, -- Sections use LighterBackground
			LayoutOrder = #pageObject.sections + 1, Parent = pageObject.frame
		}
		ApplyStandardRounding(sectionFrame)
		table.insert(pageObject.sections, sectionFrame)

		-- Padding inside the Section Frame (increased)
		local sectionContentPadding = Create("UIPadding"){
			PaddingTop = UDim.new(0, 45), -- Increased top padding for title space
			PaddingBottom = UI_INTERNAL_PADDING, PaddingLeft = UI_INTERNAL_PADDING, PaddingRight = UI_INTERNAL_PADDING,
			Parent = sectionFrame
		}

		-- List Layout for Elements within the Section
		local sectionListLayout = Create("UIListLayout"){
			Padding = UI_ELEMENT_PADDING, FillDirection = Enum.FillDirection.Vertical, HorizontalAlignment = Enum.HorizontalAlignment.Center,
			SortOrder = Enum.SortOrder.LayoutOrder, Parent = sectionFrame
		}

		-- Section Title Text (Larger)
		local sectionTitle = Create("TextLabel"){
			Name = "SectionTitle", Text = sectionName, Font = FONTS.Primary, TextSize = 18, -- Larger section title
			TextColor3 = THEME.PrimaryText, BackgroundTransparency = 1,
			Size = UDim2.new(1, -(UI_INTERNAL_PADDING.Offset * 2), 0, 22), -- Increased height for larger text
			TextXAlignment = Enum.TextXAlignment.Left,
			Position = UDim2.new(0, UI_INTERNAL_PADDING.Offset, 0, 10), -- Positioned slightly lower
			Parent = sectionFrame
		}
		-- Underline below the Section Title
		local titleUnderline = Create("Frame"){
			Name = "Underline", Size = UDim2.new(1, -(UI_INTERNAL_PADDING.Offset * 2), 0, 1.5), -- Slightly thicker underline
			Position = UDim2.new(0, UI_INTERNAL_PADDING.Offset, 0, sectionTitle.Position.Y.Offset + sectionTitle.Size.Y.Offset + 4),
			BackgroundColor3 = THEME.AccentDimmed, BorderSizePixel = 0, Parent = sectionFrame
		}

		--== Element Creation Methods within Section ==--

		function sectionObject:CreateButton(buttonText, callback)
			buttonText = buttonText or "Button"
			callback = callback or function() print(buttonText .. " clicked") end

			local button = Create("TextButton"){
				Name = "ZexiumButton", Text = buttonText, Font = FONTS.Secondary, TextSize = 15, -- Slightly larger button text
				TextColor3 = THEME.PrimaryText, BackgroundColor3 = THEME.InputBackground,
				Size = UDim2.new(1, 0, 0, 38), -- Taller buttons
				Parent = sectionFrame, AutoButtonColor = false
			}
			ApplyStandardRounding(button)
			ApplyAccentStroke(button, THEME.AccentDimmed) -- Default border

			button.MouseButton1Click:Connect(callback)

			button.MouseEnter:Connect(function()
				button.BackgroundColor3 = THEME.Hover
				ApplyAccentStroke(button, THEME.Accent) -- Use main accent for hover border
			end)
			button.MouseLeave:Connect(function()
				button.BackgroundColor3 = THEME.InputBackground
				ApplyAccentStroke(button, THEME.AccentDimmed) -- Reset border
			end)
			return button
		end

		function sectionObject:CreateSlider(sliderName, options, callback)
			sliderName = sliderName or "Slider"
			options = options or {}
			local minVal, maxVal = options.Min or 0, options.Max or 100
            local defaultVal = math.clamp(options.DefaultValue or minVal, minVal, maxVal)
			callback = callback or function(val) print(sliderName .. " value:", val) end

			local container = Create("Frame"){
				Name = sliderName .. "SliderContainer", Size = UDim2.new(1, 0, 0, 60), -- Increased height
				BackgroundTransparency = 1, Parent = sectionFrame
			}
			local nameLabel = Create("TextLabel"){
				Name = "SliderName", Text = sliderName, TextSize = 15, Font = FONTS.Secondary, TextColor3 = THEME.PrimaryText, BackgroundTransparency = 1,
				Size = UDim2.new(0.7, -5, 0, 22), Position = UDim2.new(0,0,0,2), TextXAlignment = Enum.TextXAlignment.Left, Parent = container
			}
			local valueLabel = Create("TextLabel"){
				Name = "SliderValue", Text = tostring(defaultVal), TextSize = 15, Font = FONTS.Secondary, TextColor3 = THEME.SecondaryText, BackgroundTransparency = 1,
				Size = UDim2.new(0.3, 0, 0, 22), Position = UDim2.new(0.7, 5, 0, 2), TextXAlignment = Enum.TextXAlignment.Right, Parent = container
			}
			local track = Create("Frame"){
				Name = "Track", Size = UDim2.new(1, 0, 0, 10), Position = UDim2.new(0,0,0,32), -- Lowered track, slightly thicker
				BackgroundColor3 = THEME.InputBackground, -- Use input background for track consistency
                ClipsDescendants = true, Parent = container
			}
			ApplyStandardRounding(track)
			local fill = Create("Frame"){
				Name = "Fill", Size = UDim2.new(0,0,1,0), BackgroundColor3 = THEME.Accent, BorderSizePixel = 0, Parent = track
			}
			ApplyStandardRounding(fill)
			local thumb = Create("Frame"){
				Name = "Thumb", AnchorPoint = Vector2.new(0.5,0.5), Position = UDim2.new(0, 0, 0.5, 0), -- Positioned by updateSlider
				Size = UDim2.new(0, 18, 0, 18), -- Larger thumb
                BackgroundColor3 = THEME.PrimaryText, Parent = fill
			}
			ApplyStandardRounding(thumb)
			ApplyAccentStroke(thumb, THEME.InputBackground, 1.5) -- Contrast stroke

			local currentValue = defaultVal
			local function updateSlider(percent)
				percent = math.clamp(percent, 0, 1)
                local range = maxVal - minVal
                local newValue = range == 0 and minVal or math.floor(minVal + range * percent + 0.5)

                if newValue ~= currentValue then
                    currentValue = newValue
                    fill.Size = UDim2.new(percent, 0, 1, 0)
                    thumb.Position = UDim2.new(1, 0, 0.5, 0)
                    valueLabel.Text = tostring(newValue)
                    pcall(callback, newValue)
                end
			end
			updateSlider((defaultVal - minVal) / math.max(1, maxVal - minVal))

			local draggingSlider = false
            local trackInputConn = nil
			track.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    draggingSlider = true
                    pcall(function() UserInputService:CaptureInput(input) end)
                    local relativeX = input.Position.X - track.AbsolutePosition.X
                    updateSlider(relativeX / track.AbsoluteSize.X)

                    if trackInputConn then trackInputConn:Disconnect() end
                    trackInputConn = UserInputService.InputChanged:Connect(function(inputChanged)
                        if draggingSlider and (inputChanged.UserInputType == Enum.UserInputType.MouseMovement or inputChanged.UserInputType == Enum.UserInputType.Touch) then
                            local currentRelativeX = inputChanged.Position.X - track.AbsolutePosition.X
                            updateSlider(currentRelativeX / track.AbsoluteSize.X)
                        end
                    end)
                end
			end)
			track.InputEnded:Connect(function(input)
                if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and draggingSlider then
                    draggingSlider = false
                    pcall(function() UserInputService:ReleaseInput(input) end)
                    if trackInputConn then trackInputConn:Disconnect(); trackInputConn = nil end
                end
            end)

			return container
		end

		function sectionObject:CreateDropdown(dropdownName, options, callback)
			dropdownName = dropdownName or "Dropdown"
			options = options or {}
			local listItems = options.List or {"Option 1", "Option 2"}
			local defaultItem = options.Default
			callback = callback or function(item) print(dropdownName .. " selected:", item) end
			local isOpen = false
            local currentSelection = nil

			local container = Create("Frame"){
				Name = dropdownName .. "DropdownContainer", Size = UDim2.new(1, 0, 0, 38), -- Match button height
                ClipsDescendants = true, BackgroundTransparency = 1, ZIndex = 2, Parent = sectionFrame
			}
			local button = Create("TextButton"){
				Name = "DropdownButton", Text = "Select...", Size = UDim2.new(1, 0, 1, 0),
				BackgroundColor3 = THEME.InputBackground, Font = FONTS.Secondary, TextSize = 15, TextColor3 = THEME.PrimaryText,
                TextXAlignment = Enum.TextXAlignment.Left, TextTruncate = Enum.TextTruncate.AtEnd,
                Parent = container, AutoButtonColor = false
			}
            local buttonPadding = Create("UIPadding"){ PaddingLeft = UI_INTERNAL_PADDING, PaddingRight = UDim.new(0, 30), Parent = button } -- Space for arrow
			ApplyStandardRounding(button)
			ApplyAccentStroke(button, THEME.AccentDimmed)

			local arrow = Create("TextLabel"){
				Name = "Arrow", Text = "â–¼", Size = UDim2.new(0, 25, 1, 0), AnchorPoint = Vector2.new(1, 0.5),
                Position = UDim2.new(1, -UI_INTERNAL_PADDING.Offset / 2, 0.5, 0), Font = FONTS.Primary, TextSize = 16,
                BackgroundTransparency = 1, TextColor3 = THEME.SecondaryText, TextXAlignment = Enum.TextXAlignment.Center, ZIndex = 4, Parent = button
			}
			local itemScroll = Create("ScrollingFrame"){
				Name = "ItemScroll", Position = UDim2.new(0, 0, 1, 4), Size = UDim2.new(1, 0, 0, 0), Visible = false,
				BackgroundColor3 = THEME.InputBackground, -- Match button background for seamless list
                BorderSizePixel = 0, ScrollBarImageColor3 = THEME.AccentDimmed, ScrollBarThickness = 5,
                ScrollingDirection = Enum.ScrollingDirection.Y, AutomaticCanvasSize = Enum.AutomaticSize.Y,
                CanvasSize = UDim2.new(0,0,0,0), ZIndex = 5, Parent = container
			}
			ApplyStandardRounding(itemScroll)
            ApplyAccentStroke(itemScroll, THEME.AccentDimmed) -- Border for the list frame

			local itemListLayout = Create("UIListLayout"){ Padding = UDim.new(0, 2), SortOrder = Enum.SortOrder.LayoutOrder, Parent = itemScroll }
            local itemPadding = Create("UIPadding"){ Padding = UDim.new(0, 5), Parent = itemScroll }

            local function setDropdownText(text)
                button.Text = text or "Select..."
                currentSelection = text
            end

            local function closeDropdown(fireCallback)
                if not isOpen then return end
                isOpen = false; arrow.Text = "â–¼"; container.ZIndex = 2
                itemScroll:TweenSize(UDim2.new(1,0,0,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.15, true, function()
                    if not isOpen then itemScroll.Visible = false; container.ClipsDescendants = true end
                end)
                if fireCallback and currentSelection then pcall(callback, currentSelection) end
            end

            local function openDropdown()
                if isOpen then return end
                isOpen = true; arrow.Text = "â–²"; container.ZIndex = 10; container.ClipsDescendants = false; itemScroll.Visible = true
                task.defer(function()
                    local itemCount = 0; for _, c in ipairs(itemScroll:GetChildren()) do if c:IsA("TextButton") then itemCount = itemCount + 1 end end
                    local itemHeight = 32; local listPadding = itemListLayout.Padding.Offset; local framePadding = itemPadding.PaddingTop.Offset + itemPadding.PaddingBottom.Offset
                    local neededHeight = (itemCount * itemHeight) + math.max(0, itemCount - 1) * listPadding + framePadding
                    local scrollHeight = math.min(neededHeight, 160) -- Max height 160px
                    itemScroll:TweenSize(UDim2.new(1, 0, 0, scrollHeight), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
                end)
            end

			button.MouseButton1Click:Connect(function() if isOpen then closeDropdown(false) else openDropdown() end end)
            UserInputService.InputBegan:Connect(function(input) -- Close on outside click
                if isOpen and input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local objects = playerGui:GetGuiObjectsAtPosition(input.Position.X, input.Position.Y)
                    local clickedInside = false; for _, obj in ipairs(objects) do if obj == container or obj:IsDescendantOf(container) then clickedInside = true; break end end
                    if not clickedInside then closeDropdown(false) end
                end
            end)

			for i, itemName in ipairs(listItems) do
				local itemButton = Create("TextButton"){
					Name = itemName, Text = itemName, Size = UDim2.new(1, 0, 0, 32), -- Taller items
                    Font = FONTS.Secondary, TextSize = 15, TextColor3 = THEME.PrimaryText,
					BackgroundColor3 = THEME.InputBackground, TextXAlignment = Enum.TextXAlignment.Left,
					Parent = itemScroll, AutoButtonColor = false, LayoutOrder = i
				}
                local itemButtonPadding = Create("UIPadding"){ PaddingLeft = UI_INTERNAL_PADDING, Parent = itemButton }
                ApplyStandardRounding(itemButton)

				itemButton.MouseEnter:Connect(function() itemButton.BackgroundColor3 = THEME.Hover end)
				itemButton.MouseLeave:Connect(function() itemButton.BackgroundColor3 = THEME.InputBackground end)
				itemButton.MouseButton1Click:Connect(function() setDropdownText(itemName); closeDropdown(true) end)
			end

			if defaultItem and table.find(listItems, defaultItem) then setDropdownText(defaultItem) else setDropdownText(nil) end

			return container
		end

		function sectionObject:CreateParagraph(paragraphTitle, paragraphMessage, _ignored)
			paragraphTitle = paragraphTitle or "Information"
			paragraphMessage = paragraphMessage or "This is default text."

			local container = Create("Frame"){
				Name = paragraphTitle .. "ParagraphContainer", Size = UDim2.new(1,0,0,0), AutomaticSize = Enum.AutomaticSize.Y,
				BackgroundTransparency = 1, Parent = sectionFrame
			}
			local listLayout = Create("UIListLayout"){ Padding = UDim.new(0, 6), SortOrder = Enum.SortOrder.LayoutOrder, Parent = container } -- More space

			-- Paragraph Title (Styled like a sub-header)
			local titleLabel = Create("TextLabel"){
				Name = "ParagraphTitle", Text = paragraphTitle, Font = FONTS.Primary, TextSize = 16, -- Larger, semibold title
                TextColor3 = THEME.PrimaryText, BackgroundTransparency = 1, Size = UDim2.new(1,0,0,20),
                TextXAlignment = Enum.TextXAlignment.Left, LayoutOrder = 1, Parent = container
			}
			-- Paragraph Message Body
			local messageLabel = Create("TextLabel"){
				Name = "ParagraphMessage", Text = paragraphMessage, Font = FONTS.Secondary, TextSize = 14, -- Slightly larger body text
                TextColor3 = THEME.SecondaryText, BackgroundTransparency = 1, Size = UDim2.new(1,0,0,0), AutomaticSize = Enum.AutomaticSize.Y,
                TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, TextYAlignment = Enum.TextYAlignment.Top,
                LineHeight = 1.1, -- Improve readability
                LayoutOrder = 2, Parent = container
			}
			return container
		end
		return sectionObject
	end
	return pageObject
end

return ZexiumUI
